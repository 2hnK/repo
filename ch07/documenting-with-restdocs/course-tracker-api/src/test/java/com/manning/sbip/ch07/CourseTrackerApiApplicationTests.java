package com.manning.sbip.ch07;

import static org.hamcrest.Matchers.greaterThan;
import static org.hamcrest.Matchers.hasSize;
import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.document;
import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;
import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.restdocs.AutoConfigureRestDocs;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.restdocs.payload.JsonFieldType;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.web.servlet.MockMvc;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.manning.sbip.ch07.model.Course;

@SpringBootTest
@AutoConfigureMockMvc
@RunWith(SpringJUnit4ClassRunner.class)
@AutoConfigureRestDocs(outputDir = "target/snippets")
class CourseTrackerApiApplicationTests {

	@Autowired
	private MockMvc mockMvc;
	
	@Test
	public void testPostCourse() throws Exception {
        Course course = Course.builder()
        		.name("Rapid Spring Boot Application Development")
        		.category("Spring")
        		.rating(5)
        		.description("Rapid Spring Boot Application Development").build();
        ObjectMapper objectMapper = new ObjectMapper();

        mockMvc.perform(post("/courses/")
                .contentType("application/json")
                .content(objectMapper.writeValueAsString(course)))
                .andDo(print())
                .andExpect(jsonPath("$.*", hasSize(5)))
                .andExpect(jsonPath("$.id", greaterThan(0)))
                .andExpect(jsonPath("$.name").value("Rapid Spring Boot Application Development"))
                .andExpect(jsonPath("$.category").value("Spring"))
                .andExpect(jsonPath("$.rating").value(5))
                .andExpect(status().isCreated())
                .andDo(document("course/create-course", 
                		responseFields(fieldWithPath("ID").type(JsonFieldType.NUMBER).description("Unique Course Identifier. Generated by the Course Tracker application")),
                		responseFields(fieldWithPath("Name").type(JsonFieldType.STRING).description("Name of the course")),
                		responseFields(fieldWithPath("Category").type(JsonFieldType.STRING).description("Category of the course")),
                		responseFields(fieldWithPath("Rating").type(JsonFieldType.NUMBER).description("Course rating. Can be between 1 to 5")),
                		responseFields(fieldWithPath("Description").type(JsonFieldType.STRING).description("Descripction of the course"))
             
                ))
                .andReturn().getResponse();
    }

}
